// esbuild.config.mjs
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { cpSync, mkdirSync, existsSync } from "fs";
import { join, resolve } from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// === ajuste para o seu cofre ===
const VAULT_PLUGIN_DIR = resolve(
	"C:/Obsidian Vault/Estudo/.obsidian/plugins/obsidian-autoscroll-extended"
);

// plugin: copia main.js/manifest.json/(styles.css) para o Vault após cada build e rebuild
const copyToVaultPlugin = {
	name: "copy-to-vault",
	setup(build) {
		build.onEnd((result) => {
			if (result.errors && result.errors.length) return;
			try {
				mkdirSync(VAULT_PLUGIN_DIR, { recursive: true });
				cpSync(
					"manifest.json",
					join(VAULT_PLUGIN_DIR, "manifest.json")
				);
				cpSync("main.js", join(VAULT_PLUGIN_DIR, "main.js"));
				if (existsSync("styles.css"))
					cpSync("styles.css", join(VAULT_PLUGIN_DIR, "styles.css"));
				console.log(`[copy-to-vault] Copiado para ${VAULT_PLUGIN_DIR}`);
			} catch (e) {
				console.error("[copy-to-vault] Falha ao copiar:", e);
			}
		});
	},
};

const prod = process.argv[2] === "production";

esbuild
	.build({
		banner: { js: banner },
		entryPoints: ["main.ts"],
		bundle: true,
		external: [
			"obsidian",
			"electron",
			"@codemirror/autocomplete",
			"@codemirror/collab",
			"@codemirror/commands",
			"@codemirror/language",
			"@codemirror/lint",
			"@codemirror/search",
			"@codemirror/state",
			"@codemirror/view",
			"@lezer/common",
			"@lezer/highlight",
			"@lezer/lr",
			...builtins,
		],
		format: "cjs",
		target: "es2018",
		logLevel: "info",
		sourcemap: prod ? false : "inline",
		treeShaking: true,
		outfile: "main.js", // mantém na raiz do repo
		watch: !prod, // em dev, reconstrói ao salvar
		plugins: [copyToVaultPlugin], // <-- copia para o Vault a cada build/rebuild
	})
	.catch(() => process.exit(1));
